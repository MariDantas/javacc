options {
	IGNORE_CASE = true;
	DEBUG_PARSER = true;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(CompiladorSQL)

public class CompiladorSQL {
	public static void main(String[] args) {
		try {
			CompiladorSQL parser = new CompiladorSQL(System.in);
			parser.start();
		} catch(ParseException e ) {
			System.err.print("Erro de compilacao\n");
			e.printStackTrace();
		}
	}
}

PARSER_END(CompiladorSQL)

SKIP : {
	" " | "\n" | "\t" | "\r"
}

TOKEN: {
	  <SELECT: "SELECT">
	| <FROM: "FROM">
	| <DISTINCT: "DISTINCT">
	| <WHERE: "WHERE">
	| <NOT: "NOT">
	| <AND: "AND">
	| <OR: "OR">
	| <ORDERBY: "ORDER BY">
	| <COUNT: "COUNT">
	| <ASC: "ASC">
	| <DESC: "DESC">
	| <LIKE: "LIKE">
	| <AS: "AS">
	| <BETWEEN: "BETWEEN">
	| <IN: "IN">
}

TOKEN: {
	  <SEMICOLON: ";">
	| <COMMA: ",">
	| <ALL: "*">
	| <LESSTHAN: "<">
	| <GREATERTHAN: ">">
	| <EQUAL: "=">
	| <GREATEREQUAL: ">=">
	| <LESSEQUAL: "<=">
	| <NOTEQUALA: "!=">
	| <NOTEQUALB: "<>">
	| <QUOTE: "\'">
	| <OPENPARENTHESIS: "(">
	| <CLOSEPARENTHESIS: ")">
}

TOKEN: {
	  <ID: (["A"-"Z","a"-"z"])+ (["A"-"Z","a"-"z","0"-"9"])*>
	| <WILDCARD: (["a"-"z","A"-"Z","%","_"])+>
	| <NUMBER: (["0"-"9"])+>
}

void symbols(): {} {
	<LESSTHAN>
  | <GREATERTHAN>
  | <EQUAL>
  | <GREATEREQUAL>
  | <LESSEQUAL>
  | <NOTEQUALA>
  | <NOTEQUALB>
}

void conditionalNotIn(): {} {
	<NOT> | <IN>
}

void value(): {} {
	(<QUOTE>)? (<NUMBER> | <ID>) (<QUOTE>)?
}

void tableField(): {} {
	<COMMA> <ID> (tableField())*
}

// Beginning of lexical analysis
void start(): {} {
	<SELECT> (<ALL> | <ID> (tableField())? ) <FROM> <ID> 
	(condition())* <SEMICOLON> (start())* <EOF>
}

void condition(): {} {
	<WHERE> <ID> 
	(
		  simpleCond() 
		| betweenCond()
		| likeCond()
		| notAndInCond()
		
	)
	| orderByCond()
}

void simpleCond(): {} {
	symbols() (<QUOTE>)? (<ID> | <NUMBER>) (<QUOTE>)?
	(
		(<AND> | <OR>) <ID> simpleCond()
	)*
}

void betweenCond(): {} {
	<BETWEEN> value() betweenRec()
}

void betweenRec(): {} {
	(
		<AND> value() (betweenRec())*
	) 
}

void likeCond(): {} {
	<LIKE> (<QUOTE>)? <WILDCARD> (<QUOTE>)?
}

void notAndInCond(): {} {
	// Usando * pois nao e possivel utilizar {QUANTIDADE} como no regex comum
	(conditionalNotIn())* <OPENPARENTHESIS> value() tuple() <CLOSEPARENTHESIS>
}

void tuple(): {} {
	<COMMA> value() (tuple())* 
}

void orderByCond(): {} {
	<ORDERBY> tableField() (<ASC> | <DESC>)
}
